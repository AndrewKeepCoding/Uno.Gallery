<Page x:Class="Uno.Gallery.Views.Samples.GamepadSamplePage"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	  xmlns:smtx="using:ShowMeTheXAML"
	  xmlns:local="using:Uno.Gallery"
	  xmlns:samples="using:Uno.Gallery.Views.Samples"
	  mc:Ignorable="d">

	<Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
		<local:SamplePageLayout IsDesignAgnostic="True">
			<local:SamplePageLayout.DesignAgnosticTemplate>
				<DataTemplate>
					<StackPanel>
						<smtx:XamlDisplay UniqueKey="GamepadSamplePage_Sample"
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel"
										  smtx:XamlDisplayExtensions.Header="Gamepad">
							<StackPanel Spacing="20">
								<!-- C# code
public ObservableCollection<GamepadViewModel> AvailableGamepads { get; } = new ObservableCollection<GamepadViewModel>();

private DispatcherTimer _timer = new DispatcherTimer();

public void StartObservingGamepadChanges()
{
	Gamepad.GamepadAdded += GamepadsChanged;
	Gamepad.GamepadRemoved += GamepadsChanged;

	_timer.Interval = TimeSpan.FromMilliseconds(100);
	_timer.Tick += OnGamepadReadingUpdate;
	_timer.Start();

	UpdateGamepads();
}

public void StopObservingGamepadChanges()
{
	Gamepad.GamepadAdded -= GamepadsChanged;
	Gamepad.GamepadRemoved -= GamepadsChanged;

	_timer.Stop();

	AvailableGamepads.Clear();
}


private void OnGamepadReadingUpdate(object sender, object e)
{
	UpdateGamepads();
	foreach(var gamepad in AvailableGamepads)
	{
		gamepad.Update();
		gamepad.Position = AvailableGamepads.IndexOf(gamepad);
	}
}

private void GamepadsChanged(object sender, Gamepad e)
{
	UpdateGamepads();
}

private async void UpdateGamepads()
{
	await CoreApplication.MainView.CoreWindow.Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, () =>
	{
		var existingGamepads = new HashSet<Gamepad>(AvailableGamepads.Select(g => g.Gamepad));

		var gamepadsToRemove = existingGamepads.Except(Gamepad.Gamepads);
		var gamepadsToAdd = Gamepad.Gamepads.Except(existingGamepads);

		foreach(var gamepad in gamepadsToRemove)
		{
			var vmToRemove = AvailableGamepads.FirstOrDefault(g => g.Gamepad == gamepad);
			AvailableGamepads.Remove(vmToRemove);
		}

		foreach(var gamepad in gamepadsToAdd)
		{
			var vmToAdd = new GamepadViewModel(gamepad);
			AvailableGamepads.Add(vmToAdd);
		}
	});
}


public class GamepadViewModel : ViewModelBase
{
	public GamepadViewModel(Gamepad gamepad)
	{
		Gamepad = gamepad;
	}

	public int Position { get => GetProperty<int>(); set => SetProperty(value); }

	public Gamepad Gamepad { get; }

	public void Update()
	{
		var reading = Gamepad.GetCurrentReading();

		Buttons = reading.Buttons.ToString("g");

		RightThumbstickX = reading.RightThumbstickX.ToString("0.00");
		RightThumbstickY = reading.RightThumbstickY.ToString("0.00");
		LeftThumbstickX = reading.LeftThumbstickX.ToString("0.00");
		LeftThumbstickY = reading.LeftThumbstickY.ToString("0.00");

		LeftTrigger = reading.LeftTrigger.ToString("0.00");
		RightTrigger = reading.RightTrigger.ToString("0.00");
	}

	public string Buttons { get => GetProperty<string>(); private set => SetProperty(value); }

	public string RightThumbstickX { get => GetProperty<string>(); private set => SetProperty(value); }

	public string RightThumbstickY { get => GetProperty<string>(); private set => SetProperty(value); }

	public string LeftThumbstickX { get => GetProperty<string>(); private set => SetProperty(value); }

	public string LeftThumbstickY { get => GetProperty<string>(); private set => SetProperty(value); }

	public string LeftTrigger { get => GetProperty<string>(); private set => SetProperty(value); }

	public string RightTrigger { get => GetProperty<string>(); private set => SetProperty(value); }
}
-->

								<StackPanel.DataContext>
									<samples:GamepadSamplePageViewModel />
								</StackPanel.DataContext>

								<Button Click="CheckChangeObservation_Click">
									<TextBlock Text="{Binding ButtonText}"
											   VerticalAlignment="Stretch"
											   TextAlignment="Center" />
								</Button>

								<ListView ItemsSource="{Binding AvailableGamepads, Mode=OneWay}"
										  SelectionMode="None">
									<ListView.ItemTemplate>
										<DataTemplate x:DataType="samples:GamepadViewModel"
													  x:DefaultBindMode="OneWay">
											<TextBlock LineHeight="22"
													   Margin="0,8">
													<Span FontWeight="Bold"
														  FontSize="18">Gamepad </Span>
													<Run Text="{Binding Position}"
														 FontSize="18" />
													<LineBreak />

													<Span FontWeight="Bold">Buttons: </Span>
													<Run Text="{Binding Buttons}" />
													<LineBreak />

													<Span FontWeight="Bold">Right Thumbstick: </Span>
													<Run Text="X" />
													<Run Text="{Binding RightThumbstickX}" />
													<Run Text="Y" />
													<Run Text="{Binding RightThumbstickY}" />
													<LineBreak />

													<Span FontWeight="Bold">Left Thumbstick: </Span>
													<Run Text="X" />
													<Run Text="{Binding LeftThumbstickX}" />
													<Run Text="Y" />
													<Run Text="{Binding LeftThumbstickY}" />
													<LineBreak />

													<Span FontWeight="Bold">Right Trigger: </Span>
													<Run Text="{Binding RightTrigger}" />
													<LineBreak />

													<Span FontWeight="Bold">Left Trigger: </Span>
													<Run Text="{Binding LeftTrigger}" />
											</TextBlock>
										</DataTemplate>
									</ListView.ItemTemplate>
								</ListView>
							</StackPanel>
						</smtx:XamlDisplay>
					</StackPanel>
				</DataTemplate>
			</local:SamplePageLayout.DesignAgnosticTemplate>

		</local:SamplePageLayout>
	</Grid>
</Page>
